function myPipe = abp_analysis(varargin)
% ABP_ANALYSIS - Extraction of Arterial Blood Pressure features

import meegpipe.node.*;
import pupillator.nodes.*;
import physioset.event.class_selector;
import physioset.event.value_selector;
import physioset.event.cascade_selector;
import pset.selector.event_selector;

USE_OGE = true;
DO_REPORT = true;

nodeList = {};

% Data importer
myImporter = physioset.import.edfplus(...
     'MetaMapper', @(data) pupillator.meta_mapper(data)); 
myNode = physioset_import.new('Importer', myImporter);
nodeList = [nodeList {myNode}];

% Generate events marking the boundaries between experimental conditions
myEventGenerator = pupillator.block_events_generator;
myNode = ev_gen.new('EventGenerator', myEventGenerator);
nodeList = [nodeList {myNode}];

% Calibrate the ABP channel
myNode = operator.new(...
    'Operator',         @(x) pupillator.calibrate_abp(x), ...
    'DataSelector',     pset.selector.sensor_label('^BP'), ...
    'Name',             'abp-calib');
nodeList = [nodeList {myNode}];


% ABP feature list
featNames = {...
    'block', ...
    'block_number_1_21', ...
    'block_number_1_7', ...
    'systolic_bp',  ...
    'diastolic_bp', ...
    'pulse_pressure',  ...
    'mean_pressure', ...
    'mean_dyneg', ...
    'area_under_systole1', ...
    'area_under_systole2',  ...
    'heart_rate', ...
    'co' ...
    };

featList = {...
    @(feats, ev, sel) strrep(get(ev{1}, 'Type'), 'block_', ''), ...
    @(feats, ev, sel) get(ev{1}, 'Value'), ...
    @(feats, ev, sel) get_meta(ev{1}, 'Block_1_7'), ...    
    @(feats, ev, sel) feats{1}, ...
    @(feats, ev, sel) feats{2}, ...
    @(feats, ev, sel) feats{3}, ...
    @(feats, ev, sel) feats{4}, ...
    @(feats, ev, sel) feats{5}, ...
    @(feats, ev, sel) feats{6}, ...
    @(feats, ev, sel) feats{7}, ...
    @(feats, ev, sel) feats{8}, ...
    @(feats, ev, sel) feats{9} ...
    };


% Each of these nodes will select one of the 21 blocks. Then it will
% extract the PD features for that block only.
for nodeItr = 1:21   
    
    mySel = {...
        event_selector(value_selector(nodeItr)); ...
        };
  
    myNode = generic_features.abp(...
        'TargetSelector',   mySel, ... 
        'DataSelector',     pset.selector.sensor_label('^BP'), ...
        'SecondLevel',      featList, ...
        'FeatureNames',     featNames, ...
        'Name',             ['block-' num2str(nodeItr)] ...
        );
    
    nodeList = [nodeList {myNode}]; %#ok<AGROW>
end


myPipe = pipeline.new(...
    'Name',             'pupillator-abp', ...
    'NodeList',         nodeList, ...
    'Save',             true, ...
    'OGE',              USE_OGE, ...
    'GenerateReport',   DO_REPORT, ...
    varargin{:});


end